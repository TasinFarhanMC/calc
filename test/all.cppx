#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <token.h>

// Declare your function
int shunting_yard(const int64_t *input, const int size, int64_t *output);

// Compare two RPN buffers
int rpn_equals(const int64_t *a, const int64_t *b, int size) {
  for (int i = 0; i < size; ++i) {
    if (a[i] != b[i]) return 0;
  }
  return 1;
}

const char *get_operator_name(int64_t token) {
  if (token < OP_FIRST) return "NUM";

  switch (token) {
  case OP(ADD):
    return "+";
  case OP(SUB_B):
    return "-";
  case OP(SUB_U):
    return "neg";
  case OP(MUL):
    return "*";
  case OP(DIV):
    return "/";
  case OP(PAREN_L):
    return "(";
  case OP(PAREN_R):
    return ")";
  default:
    return "UNKNOWN_OP";
  }
}

void print_rpn(const int64_t *buf, int size) {
  for (int i = 0; i < size; ++i) {
    if (buf[i] > OP(DIV))
      printf("%ld ", buf[i]);
    else
      printf("%s ", get_operator_name(buf[i]));
  }
  printf("\n");
}

void run_test(const char *name, const int64_t *in, int in_size, const int64_t *expected, int expected_size) {
  int64_t output[MAX_TOKENS];
  int out_size = shunting_yard(in, in_size, output);

  int ok = (out_size == expected_size) && rpn_equals(output, expected, out_size);

  printf("%s [%s]\n", name, ok ? "OK" : "FAIL");

  if (!ok) {
    printf("Expected: ");
    print_rpn(expected, expected_size);
    printf("Got     : ");
    print_rpn(output, out_size);
  }
}

int main() {
  {
    // (3 * 4) / (1 + 2)
    int64_t infix[] = {OP(PAREN_L), 3, OP(MUL), 4, OP(PAREN_R), OP(DIV), OP(PAREN_L), 1, OP(ADD), 2, OP(PAREN_R)};
    int64_t expected[] = {3, 4, OP(MUL), 1, 2, OP(ADD), OP(DIV)};
    run_test("(3 * 4) / (1 + 2)", infix, 11, expected, 7);
  }

  {
    // 5 + 6 * 2
    int64_t infix[] = {5, OP(ADD), 6, OP(MUL), 2};
    int64_t expected[] = {5, 6, 2, OP(MUL), OP(ADD)};
    run_test("5 + 6 * 2", infix, 5, expected, 5);
  }

  {
    // 7 - (3 + 1)
    int64_t infix[] = {7, OP(SUB_B), OP(PAREN_L), 3, OP(ADD), 1, OP(PAREN_R)};
    int64_t expected[] = {7, 3, 1, OP(ADD), OP(SUB_B)};
    run_test("7 - (3 + 1)", infix, 7, expected, 5);
  }

  {
    // -5 + 2 (unary minus)
    int64_t infix[] = {OP(PAREN_L), OP(SUB_U), OP(SUB_U), 5, OP(PAREN_R), OP(ADD), 2};
    int64_t expected[] = {5, OP(SUB_U), OP(SUB_U), 2, OP(ADD)};
    run_test("-5 + 2", infix, 7, expected, 5);
  }

  return 0;
}

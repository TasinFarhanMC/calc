#include "calc.h"
#include "test.hpp"

START_TEST();

auto make_cmds = [](CalcCmd *arr, CalcU16 size) -> CalcCmds { return CalcCmds {arr, size}; };
auto make_nums = [](CalcNum *arr, CalcU16 size) -> CalcNums { return CalcNums {arr, size}; };

auto approx_equal = [](float a, float b, float epsilon = 0.0001f) -> bool { return (a > b ? a - b : b - a) < epsilon; };

constexpr int FIXED_POINT_FRACTIONAL_BITS = 32;

auto float_to_fixed = [](float f) -> CalcSize { return (CalcSize)(f * (1L << FIXED_POINT_FRACTIONAL_BITS)); };

auto fixed_to_float = [](CalcSize fixed) -> float { return (float)fixed / (1L << FIXED_POINT_FRACTIONAL_BITS); };

const char *name = nullptr;

// Fixed-point multiplication tests
{
  name = "Fixed-point multiplication: 2.5 * 4.0";

  CalcNum a = {.val = static_cast<CalcUSize>(float_to_fixed(2.5f))};
  CalcNum b = {.val = static_cast<CalcUSize>(float_to_fixed(4.0f))};

  auto result = calc_mul_num(a, b);

  TEST_CASE("No error on mul", result.err == CALC_ERR_NONE);
  TEST_CASE("Correct mul result", approx_equal(fixed_to_float(static_cast<CalcSize>(result.ok.val)), 10.0f));
}

// Fixed-point multiplication overflow test
{
  name = "Fixed-point multiplication overflow";

  CalcNum a = {.val = static_cast<CalcUSize>(float_to_fixed(30000.0f))};
  CalcNum b = {.val = static_cast<CalcUSize>(float_to_fixed(30000.0f))};

  auto result = calc_mul_num(a, b);

  TEST_CASE("Overflow error on mul", result.err == CALC_ERR_NUM_OVERFLOW);
}

// Fixed-point division tests
{
  name = "Fixed-point division: 10 / 2";

  CalcNum a = {.val = static_cast<CalcUSize>(float_to_fixed(10.0f))};
  CalcNum b = {.val = static_cast<CalcUSize>(float_to_fixed(2.0f))};

  auto result = calc_div_num(a, b);

  TEST_CASE("No error on div", result.err == CALC_ERR_NONE);
  TEST_CASE("Correct div result", approx_equal(fixed_to_float(static_cast<CalcSize>(result.ok.val)), 5.0f));
}

// Fixed-point division by zero test
{
  name = "Fixed-point division by zero";

  CalcNum a = {.val = static_cast<CalcUSize>(float_to_fixed(5.0f))};
  CalcNum b = {.val = 0};

  auto result = calc_div_num(a, b);

  TEST_CASE("Division by zero error", result.err == CALC_ERR_DIV_ZERO);
}

// Fixed-point division overflow test
{
  name = "Fixed-point division overflow";

  CalcNum a = {.val = static_cast<CalcUSize>(float_to_fixed(100000.0f))};
  CalcNum b = {.val = static_cast<CalcUSize>(float_to_fixed(0.00001f))};

  auto result = calc_div_num(a, b);

  TEST_CASE("Overflow error on div", result.err == CALC_ERR_NUM_OVERFLOW);
}

END_TEST();
